## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input BooleanInput {
  ne: Boolean
  eq: Boolean
}

"""
@model
@crud(delete: false)
@crud(update: false)
"""
type Comment {
  """@id"""
  id: ObjectID!
  message: String!
  author: String!

  """@manyToOne(field: 'comments', key: 'noteId')"""
  note: Task
}

input CommentFilter {
  id: ObjectIDInput
  message: StringInput
  author: StringInput
  noteId: ObjectIDInput
  and: [CommentFilter]
  or: [CommentFilter]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  id: ObjectID
  message: String
  author: String
}

input CreateCommentInput {
  id: ObjectID
  message: String!
  author: String!
  noteId: ObjectID
}

input CreateTaskInput {
  id: ObjectID
  title: String!
  description: String!
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: DateTime
  payload: JSON
}

scalar DateTime

input DateTimeInput {
  ne: DateTime
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  in: [DateTime]
  between: [DateTime]
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int]
  between: [Int]
}

scalar JSON

input JSONInput {
  ne: JSON
  eq: JSON
  le: JSON
  lt: JSON
  ge: JSON
  gt: JSON
  in: [JSON]
  between: [JSON]
}

input MutateCommentInput {
  id: ObjectID!
  message: String
  author: String
  noteId: ObjectID
}

input MutateTaskInput {
  id: ObjectID!
  title: String
  description: String
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: DateTime
  payload: JSON
}

type Mutation {
  createTask(input: CreateTaskInput!): Task!
  updateTask(input: MutateTaskInput!): Task!
  deleteTask(input: MutateTaskInput!): Task!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: MutateCommentInput!): Comment!
  deleteComment(input: MutateCommentInput!): Comment!
}

scalar ObjectID

input ObjectIDInput {
  ne: ObjectID
  eq: ObjectID
  le: ObjectID
  lt: ObjectID
  ge: ObjectID
  gt: ObjectID
  in: [ObjectID]
  between: [ObjectID]
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getTask(id: ID!): Task
  findTasks(filter: TaskFilter, page: PageRequest, orderBy: OrderByInput): TaskResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTask(filter: TaskSubscriptionFilter): Task!
  updatedTask(filter: TaskSubscriptionFilter): Task!
  deletedTask(filter: TaskSubscriptionFilter): Task!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}

"""
@model
@datasync
"""
type Task {
  """@id"""
  id: ObjectID!
  title: String!
  description: String!
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: DateTime
  payload: JSON

  """@oneToMany(field: 'note', key: 'noteId')"""
  comments(filter: CommentFilter): [Comment]!
}

input TaskFilter {
  id: ObjectIDInput
  title: StringInput
  description: StringInput
  status: StringInput
  type: StringInput
  priority: IntInput
  public: BooleanInput
  startDate: DateTimeInput
  payload: JSONInput
  and: [TaskFilter]
  or: [TaskFilter]
  not: TaskFilter
}

type TaskResultList {
  items: [Task]!
  offset: Int
  limit: Int
  count: Int
}

enum TaskStatus {
  OPEN
  ASSIGNED
  COMPLETE
}

input TaskSubscriptionFilter {
  id: ObjectID
  title: String
  description: String
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: DateTime
  payload: JSON
}